name: Main

on:
  push:
    branches:
      - master
    tags:
      - "v**"
  pull_request:
    branches:
      - master
jobs:
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install
        run: npm install
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test
  local-builds:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable
          targets: x86_64-unknown-linux-musl
      - name: Install MUSL tools (linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      - name: Install MUSL cross tools (osx)
        if: matrix.os == 'macos-latest'
        run: brew install filosottile/musl-cross/musl-cross
      - name: Install
        run: npm install
      - name: Build
        shell: bash
        run: |
          cd tests/integration/test-func
          npm i -D ../../.. --silent
          npx serverless package
      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.os }}-lambda
          path: tests/integration/test-func/target/lambda/release/test-func.zip
  local-runs:
    needs: [local-builds]
    runs-on: ubuntu-latest
    steps:
      - name: Download lambdas
        uses: actions/download-artifact@v2
        with:
          path: lambdas
      - name: List Lambdas
        run: ls -alh lambdas/**/*
      - name: Run macos-latest-lambda
        run: |
          echo "running macos-latest-lambda"
          ls -al lambdas/macos-latest-lambda
          unzip -o  \
            lambdas/macos-latest-lambda/test-func.zip \
            -d /tmp/macos-latest-lambda
          ls -alh /tmp/macos-latest-lambda
          docker run \
            -i --rm \
            -v /tmp/macos-latest-lambda:/var/task:ro,delegated \
            lambci/lambda:provided 'test-func' '{"some": "event"}'
      - name: Run windows-latest-lambda
        run: |
          echo "running windows-latest-lambda"
          ls -al lambdas/windows-latest-lambda
          unzip -o  \
            lambdas/windows-latest-lambda/test-func.zip \
            -d /tmp/windows-latest-lambda
          ls -alh /tmp/windows-latest-lambda
          docker run \
            -i --rm \
            -v /tmp/windows-latest-lambda:/var/task:ro,delegated \
            lambci/lambda:provided 'test-func' '{"some": "event"}'
      - name: Run ubuntu-latest-lambda
        run: |
          echo "running ubuntu-latest-lambda"
          ls -al lambdas/ubuntu-latest-lambda
          unzip -o  \
            lambdas/ubuntu-latest-lambda/test-func.zip \
            -d /tmp/ubuntu-latest-lambda
          ls -alh /tmp/ubuntu-latest-lambda
          docker run \
            -i --rm \
            -v /tmp/ubuntu-latest-lambda:/var/task:ro,delegated \
            lambci/lambda:provided 'test-func' '{"some": "event"}'
  integration-test:
    strategy:
      matrix:
        # docker isn't available on macox-latest or windows-latest
        os: [ubuntu-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable
          targets: x86_64-unknown-linux-musl
      - name: Install MUSL tools
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      - name: Install
        run: npm install
      - name: Test
        shell: bash
        run: npm run test:integration
  publish:
    needs: [unit-test, integration-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Publish
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm publish
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
